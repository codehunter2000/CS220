class Memory {
	static Array freeMem;
	static int base, length, next;
	

    // Initializes the class.
    function void init() {
	let base = 2048;
	let length = 0;
	let next = 1;
	let freeMem = base;
	let freeMem[length] = 14335;
	let freeMem[next] = null;
	return;
    }

    // Returns the RAM value at the given address.
    function int peek(int address) {
	var Array memory;
	let memory = address;
	return memory[0];
    }

    // Sets the RAM value at the given address to the given value.
    function void poke(int address, int value) {
	var Array memory;
	let memory = address;
	let memory[0] = value;
	return;
    }

    // Finds an available RAM block of the given size and returns
    //  a reference to its base address.
    function int alloc(int size) {
	var int go;

	let go = base;
	let base = base + size;
	return go;
    }

    // De-allocates the given object (cast as an array) by making
    // it available for future allocations.
    function void deAlloc(Array o) {
	var Array block;

	if (freeMem > o)
	{
		return;
	}

	let block = freeMem;

	while (~(block[next] = null) & (block[next] < o))
	{
		let block = block[next];
	}

	return;
	
    }    
}