class String {
	field Array stringArray;
	field int max, end;

    // constructs a new empty string with a maximum length of maxLength
    //  and initial length of 0.
    constructor String new(int maxLength) 
    {
	if (max < 0)
	{
		do Sys.error(14);
	}

	let end = 0;
	let max = maxLength + 1;
	let stringArray = Array.new(max);

	return this;
    }

    /** Disposes this string. */
    method void dispose() 
    {
	do stringArray.dispose();
	do Memory.deAlloc(this);
	return;
    }

    /** Returns the current length of this string. */
    method int length() 
    {
	return end;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) 
    {
	if ((j < 0) | (j > (end - 1)))
	{
		do Sys.error(15);
	}

	return stringArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) 
    {
	if ((j < 0) | (j > (end-1)))
	{
		do Sys.error(16);
	}

	let stringArray[j] = c;
	return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) 
    {
	if (end = max)
	{
		do Sys.error(17);
	}

	let stringArray[end] = c;
	let end = end + 1;

	return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() 
    {
	if (end = 0)
	{
		do Sys.error(18);
	}

	let end = end - 1;
	let stringArray[end] = 0;

	return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() 
    {
	var int num, i, val;
	var boolean neg;

	let i = 0;
	let num = 0;

	while (i < end)
	{
		let val = stringArray[i] - 48;

		if (stringArray[i] = 45)
		{
			let neg = true;			
		}

		else
		{
			let num = (num * 10) + val;
		}

		let i = i + 1;
	}

	if (neg)
	{
		return -num;
	}

	return num;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) 
    {
	var int exp, first;

	let end = 0;
	
	if (val < 0)
	{
		let val = -val;

		if (end = max)
		{
			do Sys.error(19);	
		}

		do appendChar(45);
	}

	while (val > 0)
	{
		if (end = max)
		{
			do Sys.error(19);
		}
		
		let exp = 1;
		let first = val;

		while (first > 9)
		{
			let first = first / 10;
			let exp = exp * 10;		
		}

		let val = val - (exp * first);
		do appendChar(first + 48);
	}

	return;
    }

    /** Returns the new line character. */
    function char newLine() 
    {
	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() 
    {
	return 129;    
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() 
    {
	return 34;
    }
}